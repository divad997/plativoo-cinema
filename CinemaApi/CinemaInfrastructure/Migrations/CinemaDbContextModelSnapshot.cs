// <auto-generated />
using System;
using CinemaInfrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CinemaInfrastructure.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    partial class CinemaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<Guid>("ActorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("CinemaCore.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df042bb3-70bd-4467-a53f-21e200a75ef8"),
                            DateOfBirth = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Robert",
                            LastName = "Downey Jr"
                        },
                        new
                        {
                            Id = new Guid("1d742364-c856-4e31-a0c0-4ae18b631770"),
                            DateOfBirth = new DateTime(1981, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Chris",
                            LastName = "Evans"
                        },
                        new
                        {
                            Id = new Guid("c1b48aac-263b-4764-ae0d-dd9d51297639"),
                            DateOfBirth = new DateTime(1967, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mark",
                            LastName = "Ruffalo"
                        },
                        new
                        {
                            Id = new Guid("233bfa34-2741-4663-a561-9810f95c2ee8"),
                            DateOfBirth = new DateTime(1972, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Gwyneth",
                            LastName = "Paltrow"
                        },
                        new
                        {
                            Id = new Guid("e4de4f51-7e56-4d12-a73e-df884a895f5f"),
                            DateOfBirth = new DateTime(1963, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Johnny",
                            LastName = "Depp"
                        },
                        new
                        {
                            Id = new Guid("a18a46fe-6e6a-4382-9eef-09ac77d8c5cc"),
                            DateOfBirth = new DateTime(1967, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Benicio",
                            LastName = "Del Toro"
                        },
                        new
                        {
                            Id = new Guid("256153e2-e144-4143-bb07-bc140ff83123"),
                            DateOfBirth = new DateTime(1975, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Tobey",
                            LastName = "Maguire"
                        });
                });

            modelBuilder.Entity("CinemaCore.Models.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f519ae16-badf-4523-9995-8326a8df3585"),
                            DateOfBirth = new DateTime(1964, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Joss",
                            LastName = "Whedon"
                        },
                        new
                        {
                            Id = new Guid("b79681d3-e38b-40cc-a654-912e921bcf12"),
                            DateOfBirth = new DateTime(1966, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jon",
                            LastName = "Favreu"
                        },
                        new
                        {
                            Id = new Guid("1486270e-3059-4e8d-ba0b-5607080f29d1"),
                            DateOfBirth = new DateTime(1940, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Terry",
                            LastName = "Gilliam"
                        });
                });

            modelBuilder.Entity("CinemaCore.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("348e8ec3-a092-4a64-a497-6de690349cf3"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("e1a7cf8b-2945-4578-8977-4337d85ebe48"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("42f12480-a374-471b-9e56-5e83c425a692"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("861e42b0-f6ce-4185-80c5-69f1b46283c0"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("16460579-6c68-4da9-9d96-de60571fbc27"),
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("CinemaCore.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("CinemaCore.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaCore.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CinemaCore.Models.Movie", b =>
                {
                    b.HasOne("CinemaCore.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaCore.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("CinemaCore.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CinemaCore.Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
